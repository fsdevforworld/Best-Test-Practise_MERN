#!/bin/bash

# Runs a script in production in the production-script-runner kubernetes job.
#
# Pass in a `bin/scripts/*.ts` script as the first argument to run it:
#
#     $ ./bin/run-in-production bin/scripts/my-one-time-script.ts
#
# Arguments for the script can be appended as usual.
#
#     $ ./bin/run-in-production \
#     >     bin/scripts/my-one-time-script.ts \
#     >     normal-argument \
#     >     "arguments with spaces" \
#     >     --flags-if-your-script-handles-them


FILE=$1
ORANGE='\033[0;33m'
NC='\033[0m' # No Color

if [[ -z "$FILE" ]] ; then
    echo "Command takes a file name as the first argument"
    exit 1
fi

if [[ "$FILE" =~ ^bin\/scripts\/(.*)\.ts$ ]] ; then
    NAME=${BASH_REMATCH[1]}
else
    echo "ERROR: script must be in bin/scripts and must be a typescript file"
    exit 1
fi

if ! [ -f "$FILE" ] ; then
    echo "ERROR: Cannot find file with path $FILE"
    exit 1
fi

printf "${ORANGE}WARNING: This script will run a command in production are you sure you want to continue? [y/n]\n${NC}"
read -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Exiting"
    exit 0
fi

IS_STAGING=false
ARGUMENTS=''
for ARG in "${@:2}"; do
    if [[ "$ARG" = "--staging" || "$var" = "sm" ]] ; then
          IS_STAGING=true
    else
        NEW_ARG=$( echo "$ARG" | sed "s/'/\\\\'/" )
        ARGUMENTS="$ARGUMENTS, '$NEW_ARG'"
    fi
done

LOWER_NAME=$(echo "$NAME" | tr '[:upper:]' '[:lower:]')
if [[ $IS_STAGING = false ]] ; then
    echo "Deploying new $NAME Job to production..."
    cat infra/k8s/production-script-runner.yml \
      | sed "s|{{SCRIPT_NAME}}|$NAME|" \
      | sed "s|{{LOWER_NAME}}|$LOWER_NAME|" \
      | sed "s|{{SCRIPT_ARGUMENTS}}|$ARGUMENTS|" \
      | kubectl create -f -
    echo "Done"
else
    echo "Deploying new $NAME Job to staging..."
    cat infra/k8s/staging-script-runner.yml \
      | sed "s|{{SCRIPT_NAME}}|$NAME|" \
      | sed "s|{{LOWER_NAME}}|$LOWER_NAME|" \
      | sed "s|{{SCRIPT_ARGUMENTS}}|$ARGUMENTS|" \
      | kubectl create -f -
    echo "Done"
fi
